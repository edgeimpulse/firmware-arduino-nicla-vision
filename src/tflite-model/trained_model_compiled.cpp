/* Generated by Edge Impulse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// Generated on: 12.04.2023 11:46:21

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#define EI_MAX_SCRATCH_BUFFER_COUNT 4
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 8480;
#else
constexpr int kTensorArenaSize = 7456;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_RESHAPE, OP_CONV_2D, OP_MAX_POOL_2D, OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[8];

const TfArray<2, int> tensor_dimension0 = { 2, { 1,650 } };
const TfArray<1, float> quant0_scale = { 1, { 0.043473351746797562, } };
const TfArray<1, int> quant0_zero = { 1, { -4 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int32_t tensor_data1[4] = { 1, 50, 13, 1, };
const TfArray<1, int> tensor_dimension1 = { 1, { 4 } };
const ALIGN(8) int32_t tensor_data2[2] = { -1, 832, };
const TfArray<1, int> tensor_dimension2 = { 1, { 2 } };
const ALIGN(16) int8_t tensor_data3[8*3*3*1] = { 
  /* [0][0][][] */ -27, 127, 57, 
  /* [0][1][][] */ -17, 84, 88, 
  /* [0][2][][] */ -34, 79, 66, 
  /* [1][0][][] */ -6, -127, -11, 
  /* [1][1][][] */ -25, -55, -23, 
  /* [1][2][][] */ -33, -17, -2, 
  /* [2][0][][] */ -72, -124, -67, 
  /* [2][1][][] */ -84, -84, -64, 
  /* [2][2][][] */ -37, -57, -127, 
  /* [3][0][][] */ 99, 85, 67, 
  /* [3][1][][] */ 80, 127, 0, 
  /* [3][2][][] */ 124, 56, 20, 
  /* [4][0][][] */ 39, 91, -66, 
  /* [4][1][][] */ 25, 80, -27, 
  /* [4][2][][] */ -4, 127, -87, 
  /* [5][0][][] */ 15, 86, 29, 
  /* [5][1][][] */ -31, -127, -74, 
  /* [5][2][][] */ -7, 29, 7, 
  /* [6][0][][] */ -114, -108, -27, 
  /* [6][1][][] */ -107, -127, -41, 
  /* [6][2][][] */ -16, -72, -60, 
  /* [7][0][][] */ -111, -124, -6, 
  /* [7][1][][] */ 120, 127, 6, 
  /* [7][2][][] */ -12, -1, -5, 
};
const TfArray<4, int> tensor_dimension3 = { 4, { 8,3,3,1 } };
const TfArray<8, float> quant3_scale = { 8, { 0.0015707360580563545, 0.0014338319888338447, 0.0013594286283478141, 0.0015951261157169938, 0.0016249662730842829, 0.0023085162974894047, 0.00163468555547297, 0.0018581906333565712, } };
const TfArray<8, int> quant3_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(16) int32_t tensor_data4[8] = { -7719, -948, -9195, -11788, -7739, -3770, -11396, -5281, };
const TfArray<1, int> tensor_dimension4 = { 1, { 8 } };
const TfArray<8, float> quant4_scale = { 8, { 6.8285160523373634e-05, 6.2333485402632505e-05, 5.9098918427480385e-05, 6.934547855053097e-05, 7.0642730861436576e-05, 0.00010035894229076803, 7.1065260272007436e-05, 8.078177779680118e-05, } };
const TfArray<8, int> quant4_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(16) int8_t tensor_data5[16*3*3*8] = { 
  /* [0][0][][] */ 11,-49,-13,119,70,-110,-79,-54, 75,-11,3,40,1,-47,-38,-12, -22,42,10,34,7,-2,5,24, 
  /* [0][1][][] */ 121,-127,-70,-25,-30,-95,-25,-41, -33,-30,-42,-17,-22,-57,-39,31, -2,17,-1,21,44,-35,4,-33, 
  /* [0][2][][] */ 21,-115,-116,79,72,-65,-34,-61, 48,20,-27,2,-34,-26,-17,9, -2,-4,-41,13,58,-13,28,0, 
  /* [1][0][][] */ 18,17,-55,44,-23,-8,-11,33, -75,12,19,-9,-37,8,-26,1, 58,2,-2,-26,-39,12,34,-32, 
  /* [1][1][][] */ 48,-51,-62,39,18,-44,-23,46, -57,18,15,9,60,-22,-23,40, -34,21,-13,-69,-30,22,45,-2, 
  /* [1][2][][] */ 57,-68,-44,123,34,-51,-38,69, -43,1,2,-26,-7,10,-10,-3, -40,1,62,127,-45,-74,7,9, 
  /* [2][0][][] */ -33,-91,-24,-54,-43,-19,-17,-1, 13,-127,-45,35,-21,-76,-53,-39, 1,1,-100,-67,35,-50,-69,-2, 
  /* [2][1][][] */ 28,-97,-42,90,-5,7,-52,17, -1,-122,-51,-15,36,-26,-18,-16, 28,29,-40,34,-43,-17,-80,2, 
  /* [2][2][][] */ 43,-82,-13,32,18,-13,17,-50, -1,-42,-11,64,-10,-44,16,-17, 3,-17,-3,0,11,-33,-9,-59, 
  /* [3][0][][] */ -37,-26,33,23,-34,-12,-40,24, -48,24,2,-2,-46,-16,88,-46, -75,-5,3,-19,-9,6,-13,-35, 
  /* [3][1][][] */ 9,-59,-96,6,-20,-50,-57,-4, -72,1,55,-51,-36,-21,-53,-2, -99,14,2,-43,-86,-12,15,-78, 
  /* [3][2][][] */ 10,-127,-115,23,-16,-35,-101,4, 24,-15,-24,2,-1,-17,43,9, -91,3,6,-81,-87,-27,-25,-20, 
  /* [4][0][][] */ -29,-53,-61,-104,-34,-52,-30,-59, 2,-107,-89,-25,-25,-99,-46,-44, -16,-13,-30,-29,-8,18,-84,-6, 
  /* [4][1][][] */ -52,-46,-127,-91,-89,-40,-68,-67, -7,-93,-97,-31,12,-44,-82,-121, 1,-7,-63,-21,-29,-40,-83,-13, 
  /* [4][2][][] */ -55,-42,-66,-29,-90,-61,-76,-53, 5,-66,-85,-24,-59,-22,-82,-4, -4,-45,-32,15,8,-20,-67,14, 
  /* [5][0][][] */ 52,-113,-77,2,75,-27,-59,-97, 4,15,-113,28,-41,-72,-71,-42, 34,-66,-52,18,44,-42,-17,-26, 
  /* [5][1][][] */ 23,-127,-80,83,-3,-23,-61,20, 3,-38,-92,18,-27,-68,-74,-10, 10,-15,-55,27,14,10,-88,-22, 
  /* [5][2][][] */ 0,-92,-54,68,-23,4,-119,-87, 8,-32,-34,-31,55,-41,-10,-39, -15,-26,-59,23,-6,14,-56,0, 
  /* [6][0][][] */ -25,16,-103,-1,82,80,-50,101, 41,-16,-20,-48,-19,33,-48,33, -50,-4,-36,10,15,16,-89,28, 
  /* [6][1][][] */ -80,35,-41,-73,-12,65,-49,99, -30,4,6,-43,5,-34,-35,67, -29,-35,-21,-10,-26,76,-22,-62, 
  /* [6][2][][] */ -127,19,-53,-45,75,83,-64,57, 93,-21,-55,-7,-21,8,-116,76, -42,-43,9,28,0,47,-33,53, 
  /* [7][0][][] */ -30,7,53,-57,-127,-13,28,-29, 2,7,27,-9,33,10,28,-56, -15,-101,-76,1,3,9,-79,-19, 
  /* [7][1][][] */ -65,16,0,-28,-59,-4,27,-19, -96,0,16,-35,-4,8,30,-19, 15,-43,-81,7,27,18,-59,-8, 
  /* [7][2][][] */ -6,-9,10,10,-3,-50,45,24, -73,25,33,-55,-49,-19,22,-15, -4,-14,-44,-4,21,-1,-44,-20, 
  /* [8][0][][] */ -12,-21,-32,-28,-65,0,-4,-26, 0,-65,-64,-31,18,-54,-58,-1, -14,28,42,-89,-59,9,57,28, 
  /* [8][1][][] */ 3,3,14,-84,-84,-26,9,-22, 26,-116,-69,1,10,-50,-83,-3, -22,-3,-9,-18,5,-15,-18,-8, 
  /* [8][2][][] */ 7,20,7,-87,-57,-12,25,-4, 23,-85,-127,2,-19,-19,-107,-13, -11,-47,-95,18,38,-27,-39,12, 
  /* [9][0][][] */ -67,29,-32,97,92,31,-25,-45, 22,11,-1,-44,95,-14,-6,-29, 35,-51,-49,-30,44,-18,-102,-43, 
  /* [9][1][][] */ -127,22,45,38,7,-11,-63,-53, 15,17,-1,-33,77,26,45,-80, -32,-26,-56,-23,34,-47,-29,-65, 
  /* [9][2][][] */ -70,67,-31,-48,59,-72,12,-82, 52,-28,-3,-50,59,-49,50,-51, -5,20,-108,27,36,-94,-3,10, 
  /* [10][0][][] */ -23,4,8,46,-25,-27,-25,19, 73,-68,-7,60,63,25,-69,65, 19,-8,83,8,-7,-52,32,54, 
  /* [10][1][][] */ -64,0,-1,63,62,-5,-127,-43, 29,-30,-37,12,-2,5,-56,-91, -22,27,7,44,43,33,88,-31, 
  /* [10][2][][] */ 2,-8,-111,-10,24,-111,-94,-93, 85,-7,-54,30,-13,-64,-108,-78, -35,28,86,-34,10,8,34,-86, 
  /* [11][0][][] */ 51,31,-34,20,76,-28,11,-42, -16,7,-27,18,6,-12,-35,35, 16,27,27,11,-15,-18,39,-12, 
  /* [11][1][][] */ 24,13,-55,46,-62,-127,-9,-98, 17,-11,18,-25,12,-20,-16,-29, -5,0,18,-35,12,-48,-23,-57, 
  /* [11][2][][] */ 16,-5,-36,50,68,-98,-48,-66, 33,7,-6,-10,-22,-24,-26,-27, -14,16,20,50,11,-46,37,-37, 
  /* [12][0][][] */ -24,-67,-72,64,-56,-3,-15,-29, -14,-96,27,118,-19,-98,-10,34, 68,20,16,27,23,-28,2,28, 
  /* [12][1][][] */ -54,-105,-90,48,21,-28,-39,48, 43,-114,-56,-92,46,-61,-18,-6, 1,-11,15,7,14,-46,-11,22, 
  /* [12][2][][] */ -31,-97,-66,-34,-20,56,-127,75, -39,-78,-80,115,-6,28,32,22, 55,1,33,-17,-26,3,31,-10, 
  /* [13][0][][] */ -127,50,33,63,-29,10,34,-67, -94,-17,16,-98,-108,-10,5,-22, 1,-5,-2,-41,1,16,23,-23, 
  /* [13][1][][] */ -76,-20,-17,47,-80,-8,55,-45, -101,20,33,-90,-47,6,-6,-54, -2,-14,3,-5,17,22,-7,-1, 
  /* [13][2][][] */ -29,32,45,11,-43,-24,27,-5, -95,2,9,-104,-83,33,-13,-16, -3,-9,-11,-48,9,-30,-54,22, 
  /* [14][0][][] */ -100,9,-15,29,-95,9,-16,-60, -71,21,-21,-65,-92,-49,-11,-48, -47,-19,7,-106,-64,-28,-11,-9, 
  /* [14][1][][] */ -118,-32,29,7,-83,-27,12,-49, -127,13,4,-80,-104,-67,-1,-47, -57,-14,-5,-71,-69,-69,-28,-52, 
  /* [14][2][][] */ -58,42,-36,-41,-78,0,-41,6, -80,9,7,-103,-92,-26,-38,-58, -50,-4,-19,-83,-37,-30,-33,-83, 
  /* [15][0][][] */ -60,-5,3,-45,-54,-42,-5,54, -21,-18,8,-83,-32,99,48,36, -26,8,37,6,-4,-5,12,52, 
  /* [15][1][][] */ -73,19,31,-85,-44,127,81,25, -31,2,60,-70,-108,6,2,90, -19,8,-12,-5,-37,-22,-21,13, 
  /* [15][2][][] */ -16,-35,0,-105,-85,63,-32,3, -66,-21,-16,-28,-109,14,-22,39, -30,-17,-80,-2,-29,78,-81,27, 
};
const TfArray<4, int> tensor_dimension5 = { 4, { 16,3,3,8 } };
const TfArray<16, float> quant5_scale = { 16, { 0.004296089056879282, 0.0048033245839178562, 0.0055268341675400734, 0.0061562284827232361, 0.0063874959014356136, 0.0051712458953261375, 0.0035035884939134121, 0.0062938649207353592, 0.0063252970576286316, 0.0040893964469432831, 0.0043083531782031059, 0.0056542730890214443, 0.004681736696511507, 0.0055811535567045212, 0.0060172709636390209, 0.0038119114469736814, } };
const TfArray<16, int> quant5_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(16) int32_t tensor_data6[16] = { -12014, -10921, 604, -1593, 4971, -4544, -4577, -4902, -453, -9044, -17865, -12019, -13554, -4952, 3871, -2523, };
const TfArray<1, int> tensor_dimension6 = { 1, { 16 } };
const TfArray<16, float> quant6_scale = { 16, { 4.506360346567817e-05, 5.0384223868604749e-05, 5.7973440561909229e-05, 6.4575440774206072e-05, 6.700130325043574e-05, 5.424351547844708e-05, 3.6750709114130586e-05, 6.6019165387842804e-05, 6.6348875407129526e-05, 4.2895509977824986e-05, 4.519224603427574e-05, 5.9310204960638657e-05, 4.9108832172350958e-05, 5.8543220802675933e-05, 6.3117848185356706e-05, 3.998484680778347e-05, } };
const TfArray<16, int> quant6_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(16) int8_t tensor_data7[3*832] = { 
  -111, -9, -95, 39, -127, -70, -43, 41, -44, 23, -52, -40, -84, 37, 48, 43, 2, 15, -26, 16, -28, 32, -41, -13, 4, -14, -31, 26, -71, 4, 12, -23, -92, -66, -5, -36, 35, -54, -32, 30, 3, 19, 19, -50, -11, 0, 3, 6, 60, -8, 48, -20, 21, 23, -24, -9, 38, -3, -3, 29, -72, -50, -13, -33, 21, 1, 23, 31, -4, 35, -57, 20, -18, -2, -69, -52, -40, 35, 10, 33, 55, 33, -10, 36, -52, 0, -44, -2, 59, -7, 21, 34, -35, 1, 12, -7, -41, 9, 7, 44, 17, -54, -2, 38, 15, 50, -20, -5, -6, 22, 11, 1, -25, 17, 5, -51, 53, 8, -5, -24, 39, -54, -76, 14, -41, -20, -7, -50, -4, -63, -9, 14, 55, 43, -63, 12, 25, -17, -61, -39, -68, 27, 1, 20, 7, 10, -30, 25, -53, -11, -54, -24, 54, -8, 13, 5, -5, -23, -9, -28, -39, 1, -23, 27, -28, -73, -8, 36, 32, 32, 50, 23, -22, 19, -1, -4, 27, -26, 26, -29, 8, 2, -13, 20, 25, 3, -11, 14, -12, -19, -44, -43, 21, -58, -3, 23, 74, 23, -79, 47, 17, -18, -56, -49, -54, 42, 14, -13, -10, 20, -35, 30, -44, 3, -37, -44, 58, 20, 27, -8, -24, -35, 1, -45, 1, -12, -19, 50, -10, -63, -26, 33, 60, -5, -5, 28, -59, 2, -4, 3, 6, 8, 27, 39, -10, 23, 9, -24, -4, -4, -14, 20, -10, -14, -26, -11, -5, -68, 35, 43, 73, 43, -82, 57, 28, -37, -64, -53, -21, 67, 6, 33, 2, 20, -7, 13, -38, -15, -33, -62, 33, 9, 5, 6, -28, -58, -18, -54, 5, 13, 13, 10, -3, 7, 0, 7, 44, -9, 14, -14, 30, 0, -25, -31, -25, 1, 21, 40, -35, -16, -18, 3, 44, 17, 6, -10, -4, 7, -16, -28, 8, -69, 17, 10, 52, 29, -73, 32, 25, -60, -51, -66, -13, 63, -24, 4, -12, 8, -14, 33, -54, 14, -8, -53, 31, 15, -3, 12, 0, -36, -23, -28, 12, 18, 20, 29, -68, 24, -7, -5, 66, -9, 60, 42, -14, -8, -21, 8, -28, 13, 18, 44, -49, -22, -25, 28, -23, 37, -30, -15, -68, 25, 27, 3, -25, -62, 35, 15, 57, 26, -121, 30, 31, -40, -55, -47, -20, -4, -62, -42, 17, 32, 17, 26, 20, 14, -5, -40, 19, -18, 18, -9, -5, -49, -44, -88, 17, 1, 20, 8, 13, -2, -6, -6, 45, 6, 16, 29, -16, -9, -33, -16, -28, -1, 18, 47, -8, -54, -22, -10, -3, 4, 13, -28, 6, 3, -7, -9, -8, -40, 27, -11, 43, 21, -53, 18, 41, 10, -45, -25, -8, -26, -115, -59, 5, 14, 9, 26, -45, -4, 2, -68, 27, 2, -13, 4, 15, -44, -51, -82, 22, 12, -12, 2, 68, -12, 1, 12, 13, -16, -7, 8, 10, -16, -30, -19, -10, 13, 22, 54, 40, -20, -24, -12, -34, 27, 2, -14, 5, 2, -10, -10, 4, -51, 25, -22, 26, 23, -72, 35, 41, 18, -16, -25, -8, 24, -69, -38, 14, -17, -29, -81, -66, 1, 15, -37, -2, 35, 14, 6, -34, -57, -75, -88, 28, 21, -9, 27, 1, 15, 2, -12, 23, -1, -2, 10, -27, -32, -34, -21, -6, 22, -12, 44, -12, -16, -17, 31, -30, 16, -12, -40, -28, 20, 12, 9, -12, -57, 17, 37, 56, 25, -64, 53, 49, 0, -55, -18, -25, 67, -1, 2, -25, 26, -12, -63, -26, 4, -5, -28, -17, 10, 0, -6, -37, -51, -28, -19, 7, -20, -9, 26, -23, -27, -22, -31, 21, -26, 42, 13, -3, -42, 20, -25, -28, -20, -31, 49, -13, -27, -33, 18, -46, 51, -31, -22, -56, 38, 13, -5, -11, -20, 40, 11, 43, 20, -49, 37, 25, 23, -57, -20, 2, 65, -17, -9, -2, 1, -17, -28, -49, 27, -2, -18, -20, 7, -18, 14, -16, -18, -2, -36, -18, -9, -6, 20, -4, -21, -3, -23, -16, -19, 21, 22, 5, -26, 25, -23, 0, -16, -8, 2, 14, -36, -40, 24, -24, 60, 2, 17, -58, 44, 35, -30, -27, -22, 25, 30, 3, 38, -50, 18, 2, 31, -40, -32, 32, 59, 32, 30, -12, 1, -15, -21, -36, 20, 23, 2, -28, 22, -31, 6, 37, -7, -8, -42, 6, 22, -13, 41, 14, -20, -29, -51, -21, -44, 31, 4, 3, -12, 21, -11, -19, -43, -39, 33, 39, -16, -26, 8, -30, 48, -20, -33, -46, 31, 10, 6, 2, 1, 30, 34, -33, 14, -42, 57, -10, 50, -48, -33, 3, 62, 30, 58, -9, -4, 22, -31, -36, -4, 12, 2, -9, 8, -13, 10, 15, -11, -11, -18, -3, 29, 11, -18, 23, -18, -55, -59, -35, -70, -25, 3, -12, -28, 14, -11, -33, -33, -3, -10, 3, -25, -21, 34, -5, 6, -24, -20, -30, 10, 0, -43, 
  24, 3, 45, -37, 54, 26, 38, -25, 16, -29, -14, 5, -4, -32, -71, -34, 12, 1, 17, -15, -31, 5, 3, -1, 5, -6, 14, -6, 43, 19, -16, 7, 32, 29, 22, 14, -41, 45, 19, 6, -4, 7, -12, 6, 9, -1, 5, 12, -12, 28, 13, 21, -37, 15, 25, 11, 0, 13, 21, 7, 16, 17, 11, 20, -20, 19, -6, -20, 64, -9, 39, -20, 12, 0, 11, -9, -18, -51, -65, -5, 3, -11, 21, -18, -15, 14, 19, 11, -3, 2, 21, -9, 22, 15, 1, 4, 4, 33, 25, -13, 32, 40, 16, -18, 13, -12, 5, -26, 38, -4, -25, 18, -22, -10, -14, 16, 12, -13, 15, 7, -50, 7, 3, -50, -8, 6, 10, 18, -31, 13, -5, 0, -9, -33, 42, 4, 0, 1, 20, -8, -8, -18, -44, -10, -3, -18, 1, 5, -33, 8, 22, 40, -19, 2, -33, -9, 10, 14, -21, 28, 27, 11, 35, 2, 27, 29, 7, -29, 3, -21, 7, 2, 14, -2, 17, 10, -13, 37, -6, 8, 22, 10, 5, -12, -41, 2, 0, -44, 35, 3, 3, 37, -31, 21, -34, -13, -22, -46, 46, 3, -6, 9, 19, 6, 4, -25, -49, 26, -7, -7, 27, -15, -1, 7, 36, 38, -36, -12, -37, -24, -9, 25, -9, 19, -7, -4, 21, 5, -16, 34, 12, -21, -38, -47, -16, -37, 38, -9, -16, 13, 10, 14, -4, 8, -15, -12, -1, 19, -28, 17, 14, -37, -17, 23, 25, 23, -26, 25, -25, -8, -28, -31, 32, -13, 6, 7, 15, -3, 11, -21, -6, -3, 12, -15, 17, 11, 7, 4, 23, 24, -13, -40, 0, -6, 8, 19, -24, 19, 7, -8, 16, -13, -21, -4, 4, -14, -26, -33, -17, -19, 1, -1, 9, 22, -8, 7, -28, 19, 32, 21, 8, 5, -22, -6, -36, -4, 1, -15, 1, 21, -39, 19, -51, -12, -28, -45, 12, -12, -21, 2, 6, -13, -30, -67, -20, 25, -20, -25, -15, -26, -25, -19, 18, 9, -16, -17, -34, -26, -26, -10, 32, 35, -20, -21, -19, -12, 29, -36, 15, -19, -29, -2, -43, -73, 12, 0, 27, 11, 13, -8, -33, -58, 40, -24, 3, -17, -6, -41, 81, 7, 38, -7, 14, 2, -39, 1, -49, 5, -50, -61, 28, -39, -10, 6, 12, -2, -49, -5, 28, 47, -13, -40, -16, 1, -14, -28, 30, 21, -36, 11, -43, -21, -50, 16, 20, 40, -67, 11, -16, -15, -13, -39, -1, -14, 5, -30, -23, -56, 36, -9, 33, 17, 16, -17, -46, -23, -16, 20, 11, -23, -27, 4, -18, 11, -2, 14, 23, 16, -35, 5, -48, 17, -17, -57, 7, 18, -1, -39, -13, -20, -27, 16, 13, 45, -23, -19, -17, -1, -24, -32, 0, 37, -6, 11, 12, -17, -34, 25, 14, 51, -25, 33, 32, 9, -12, 18, 5, 6, 37, 0, -14, -19, -20, 2, 30, -3, -22, 37, 20, -28, -11, 20, 15, -6, -35, -39, -23, -20, 21, 2, 22, 2, -51, -6, -37, 13, -3, -64, 14, 41, -13, 0, -21, -36, -43, 13, 17, 34, -19, 2, -11, 35, 12, -2, 3, 24, 18, -48, -42, -31, -28, 30, 6, 34, -11, -25, 9, -13, 22, -12, 20, 4, -5, -6, -3, -5, 1, 10, 5, 27, -12, 3, 14, -15, 16, 4, 24, -41, -5, -6, 18, -6, 18, -29, -7, 12, -34, -4, -24, -5, -3, -34, 38, 2, -22, 0, 12, -10, -41, -48, -31, 13, -3, -1, 1, 16, 2, -31, 0, 8, 20, 1, -19, -14, 11, 15, -12, 27, 7, 37, 14, 19, -8, -4, 15, 8, -18, 1, -29, -22, 0, 4, -15, 10, 10, 6, 9, 7, -9, -5, 8, 16, 26, -8, -16, -13, -25, -14, -16, 11, -28, -21, -19, -20, -12, -29, 55, -28, -6, -12, -1, -7, -41, -57, -48, 33, -20, -4, -8, 15, -42, -24, 31, -14, 5, 0, 16, -8, 21, 13, -39, 18, 10, 5, -1, 3, -19, 13, 12, 9, -11, 12, -17, -1, -2, 18, -2, 21, -24, -4, 25, 9, -30, 1, 24, 1, -20, -15, 7, -38, 3, -9, 2, 14, -5, 3, -19, -21, 26, -20, 58, -36, 36, 1, 21, -6, -28, -59, -60, -11, -22, 9, -1, 3, -42, -18, 17, 7, 21, -5, -13, -10, -32, 3, 0, 26, -10, 31, 10, -2, -37, -9, 19, 10, 26, 2, -24, -28, 25, 13, -18, 9, -10, 9, 11, 12, -45, -12, 9, 8, 98, -21, -8, -7, 20, 1, 1, 19, -40, 23, -15, -18, 41, -34, 52, -48, 20, 4, 60, 36, -6, -37, -48, -5, 29, 7, -11, -2, -35, 22, 16, 1, -21, 26, -15, -13, 8, 6, 6, 23, 12, 5, 1, 3, -37, -12, 24, 15, 18, 18, 42, 7, 12, 18, -12, 40, 10, 18, 21, 20, -17, -17, -1, -19, 18, 0, 2, -10, 33, 12, -9, 34, 
  24, -6, 15, -3, 24, 14, -20, -18, 9, -8, 27, 11, 29, -11, 11, -14, -38, 11, 11, -4, 58, -24, 15, 10, -16, 24, 0, -9, 14, -15, 6, 12, 26, 27, 0, 15, 9, 4, 0, -28, -5, -29, 10, 38, -18, -6, -13, 0, -47, -32, -55, 1, -30, -39, 4, -3, -42, 12, -24, -47, 39, 9, 1, 4, 18, 4, -2, -15, -36, 0, -9, -8, -15, -5, 31, 27, 45, -15, 23, -12, -34, -5, -1, -29, 63, -20, 13, 6, -41, 0, -23, -12, 17, -9, 2, -1, 22, -30, -17, -18, -38, 4, -4, -12, -13, -32, -7, 40, -22, -7, 3, 2, 17, 8, -5, 20, -41, 10, 1, 21, -5, 41, 65, 40, 45, 5, 5, 12, 21, 21, 12, -12, -21, 7, -11, -5, -15, 18, 45, 31, 57, -20, 22, 1, -16, 5, 13, -21, 62, 1, 18, -1, -7, 14, 11, 16, -4, 9, 17, 7, -8, -2, -1, -28, -19, 36, 11, -15, -21, -6, -33, -7, 25, -16, 10, -5, -10, -28, -29, 15, -27, -6, 0, -8, 4, 2, 1, 26, -18, 0, 24, -7, 21, 25, 26, -19, -42, 17, 8, -35, -15, 3, 24, 25, 26, -29, 34, -9, 7, -7, 1, -5, 20, -10, 8, -5, -21, -5, 13, 8, 23, -1, 14, 10, 8, 1, 2, -44, 21, 9, 1, 2, -27, 24, 16, 35, -1, -1, 8, -9, -12, -12, -18, -37, 26, -1, -5, -12, 22, -7, 5, 10, 15, 0, -3, -7, 33, 37, 5, -14, -39, 14, 22, -29, -2, 25, 50, 57, 18, -41, -10, -13, -9, 1, -14, -19, 27, -6, 0, 19, -14, 19, 3, -16, 21, 28, 36, 7, -2, -16, -16, -12, 20, -3, -5, -3, -30, 18, -11, 28, -27, -11, 21, 0, 12, 4, 9, -36, 13, -9, 14, 5, -16, 5, 30, -5, -6, -3, 6, 7, 18, 49, 10, 0, -43, 13, 37, -34, 12, 36, 31, 38, 44, -2, 28, -33, 15, 10, 27, -6, 50, 15, 4, 35, -19, 11, 24, 11, 29, 18, -8, -5, 3, 2, 6, -11, 35, 16, 2, -4, -28, 1, -12, 31, -27, -6, -16, -12, 23, 13, 16, 0, -13, 31, 1, -15, 13, -9, -30, 6, 21, -8, -20, 2, 52, 41, 21, 10, -26, 23, 38, -8, -9, 28, 30, 57, 41, 16, 27, -20, 19, 7, 16, -6, -14, 12, 0, 8, 12, 2, 7, 16, 37, 23, 16, 1, 29, 10, 9, -9, -29, 18, 3, 3, -33, 8, -7, -4, -12, 27, -10, 2, 17, 6, 21, -14, 31, 40, -6, 12, 18, -16, 0, 20, 3, -13, -11, -6, 33, 25, 6, -11, -31, 26, 28, -43, -14, 28, 37, 33, 31, 0, 41, -11, 21, 2, 11, -26, 39, 24, 0, 11, -14, -3, 2, 2, 22, 19, 17, -1, -4, -26, -16, -23, -46, -5, 6, -6, -48, 16, 9, 0, 21, 1, 1, 13, 20, -45, -32, -14, -20, 11, -2, 3, 41, 16, 31, 23, -29, -3, -18, -4, 29, 45, 21, 13, 9, 27, 25, -63, -13, 16, 26, 44, 32, -27, 34, -6, 12, -4, 30, 5, 40, 6, -5, 6, -12, 8, 3, 18, 48, 18, 44, 17, 1, -10, 12, -15, -28, -24, 1, -4, -21, 16, -5, -9, 17, 14, 29, -1, -3, -24, -21, -21, -13, -2, -16, -7, 22, 2, 14, 29, -8, 5, -9, 0, 27, 26, 7, -10, -35, 10, 1, -52, -26, -10, 30, 20, 29, -28, 35, -1, 12, -14, 4, 38, 39, 20, -7, 16, -10, -5, 27, 24, 20, 3, 28, 0, -11, -23, -8, -31, 27, 2, 0, 22, -18, 20, 1, 10, -1, 6, 13, -3, 4, 11, 21, -45, 17, 35, 15, -37, 11, -44, 43, 27, 63, -24, 0, -14, 38, 18, 0, -3, -18, 10, -14, -20, -9, -22, 24, 18, 35, -24, 65, -23, 21, -17, 20, 11, 80, -5, -22, 18, 17, 6, 26, -3, 3, 7, 35, -4, 12, 10, 5, -32, 23, -7, -5, -9, 8, 7, -8, -11, 5, 5, -1, 17, 13, 24, -21, -23, 7, 13, 9, -28, 38, -54, 17, 35, 19, -39, -15, 2, 25, 10, 8, -15, -30, -7, -26, -8, -17, -21, 20, 21, 6, -12, 34, -32, 31, -3, 3, 10, 64, 2, -22, -9, 8, 11, 13, -5, 1, 8, 27, 10, 8, -42, -3, -24, 42, 16, 4, 15, -20, 40, -1, 23, -20, -5, -22, -12, 33, 8, 15, -28, 13, 20, 7, -30, -60, -28, 27, 23, 15, -20, 4, -4, 20, -39, -30, -21, -21, 29, -46, -28, -32, -55, -21, -3, -15, -34, 22, -55, -22, 3, -32, 11, 40, -18, -2, -17, 3, -14, 29, 11, -10, -17, 14, -6, -14, -35, -17, 14, 22, 34, -6, 24, 1, 26, -10, -20, -9, 9, -13, -17, 12, -1, 4, -20, 31, 27, 20, -20, -20, 13, 30, 16, 5, -24, 17, -5, 
};
const TfArray<2, int> tensor_dimension7 = { 2, { 3,832 } };
const TfArray<1, float> quant7_scale = { 1, { 0.0077999280765652657, } };
const TfArray<1, int> quant7_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(8) int32_t tensor_data8[3] = { -1505, 5000, -3272, };
const TfArray<1, int> tensor_dimension8 = { 1, { 3 } };
const TfArray<1, float> quant8_scale = { 1, { 7.474202720914036e-05, } };
const TfArray<1, int> quant8_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const TfArray<4, int> tensor_dimension9 = { 4, { 1,50,13,1 } };
const TfArray<1, float> quant9_scale = { 1, { 0.043473351746797562, } };
const TfArray<1, int> quant9_zero = { 1, { -4 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const TfArray<4, int> tensor_dimension10 = { 4, { 1,50,13,8 } };
const TfArray<1, float> quant10_scale = { 1, { 0.010489447973668575, } };
const TfArray<1, int> quant10_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const TfArray<4, int> tensor_dimension11 = { 4, { 1,25,7,8 } };
const TfArray<1, float> quant11_scale = { 1, { 0.010489447973668575, } };
const TfArray<1, int> quant11_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 0 };
const TfArray<4, int> tensor_dimension12 = { 4, { 1,25,7,16 } };
const TfArray<1, float> quant12_scale = { 1, { 0.0095823993906378746, } };
const TfArray<1, int> quant12_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const TfArray<4, int> tensor_dimension13 = { 4, { 1,13,4,16 } };
const TfArray<1, float> quant13_scale = { 1, { 0.0095823993906378746, } };
const TfArray<1, int> quant13_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const TfArray<2, int> tensor_dimension14 = { 2, { 1,832 } };
const TfArray<1, float> quant14_scale = { 1, { 0.0095823993906378746, } };
const TfArray<1, int> quant14_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const TfArray<2, int> tensor_dimension15 = { 2, { 1,3 } };
const TfArray<1, float> quant15_scale = { 1, { 0.063772395253181458, } };
const TfArray<1, int> quant15_zero = { 1, { 21 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const TfArray<2, int> tensor_dimension16 = { 2, { 1,3 } };
const TfArray<1, float> quant16_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant16_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const TfLiteReshapeParams opdata0 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs0 = { 2, { 0,1 } };
const TfArray<1, int> outputs0 = { 1, { 9 } };
const TfLiteConvParams opdata1 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 9,3,4 } };
const TfArray<1, int> outputs1 = { 1, { 10 } };
const TfLitePoolParams opdata2 = { kTfLitePaddingSame, 2,2, 2,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs2 = { 1, { 10 } };
const TfArray<1, int> outputs2 = { 1, { 11 } };
const TfLiteConvParams opdata3 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs3 = { 3, { 11,5,6 } };
const TfArray<1, int> outputs3 = { 1, { 12 } };
const TfLitePoolParams opdata4 = { kTfLitePaddingSame, 2,2, 2,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs4 = { 1, { 12 } };
const TfArray<1, int> outputs4 = { 1, { 13 } };
const TfLiteReshapeParams opdata5 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs5 = { 2, { 13,2 } };
const TfArray<1, int> outputs5 = { 1, { 14 } };
const TfLiteFullyConnectedParams opdata6 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs6 = { 3, { 14,7,8 } };
const TfArray<1, int> outputs6 = { 1, { 15 } };
const TfLiteSoftmaxParams opdata7 = { 1 };
const TfArray<1, int> inputs7 = { 1, { 15 } };
const TfArray<1, int> outputs7 = { 1, { 16 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension0, 650, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 8, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 72, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant3))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant4))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant5))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant6))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data7, (TfLiteIntArray*)&tensor_dimension7, 2496, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant7))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data8, (TfLiteIntArray*)&tensor_dimension8, 12, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant8))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 5200, (TfLiteIntArray*)&tensor_dimension9, 650, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant9))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension10, 5200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant10))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 5200, (TfLiteIntArray*)&tensor_dimension11, 1400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant11))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension12, 2800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant12))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 2800, (TfLiteIntArray*)&tensor_dimension13, 832, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant13))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension14, 832, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant14))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 832, (TfLiteIntArray*)&tensor_dimension15, 3, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant15))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension16, 3, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant16))}, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs4, (TfLiteIntArray*)&outputs4, const_cast<void*>(static_cast<const void*>(&opdata4)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs5, (TfLiteIntArray*)&outputs5, const_cast<void*>(static_cast<const void*>(&opdata5)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs6, (TfLiteIntArray*)&outputs6, const_cast<void*>(static_cast<const void*>(&opdata6)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs7, (TfLiteIntArray*)&outputs7, const_cast<void*>(static_cast<const void*>(&opdata7)), OP_SOFTMAX, },
};

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(size_t i, TfLiteEvalTensor *tensor) {
  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBuffer(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  if (current_location - bytes < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArena(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBuffer(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBuffer(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensor(const struct TfLiteContext* context,
                               int tensor_idx) {

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensor(const struct TfLiteContext* context,
                                       int tensor_idx) {

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

} // namespace

TfLiteStatus trained_model_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
  ctx.GetScratchBuffer = &GetScratchBuffer;
  ctx.GetTensor = &GetTensor;
  ctx.GetEvalTensor = &GetEvalTensor;
  ctx.tensors_size = 17;
  for (size_t i = 0; i < 17; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_RESHAPE] = Register_RESHAPE();
  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_MAX_POOL_2D] = Register_MAX_POOL_2D();
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t i = 0; i < 8; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
tflNodes[i].custom_initial_data = nullptr;
      tflNodes[i].custom_initial_data_size = 0;
if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for (size_t i = 0; i < 8; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      ResetTensors();

      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteStatus trained_model_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(inTensorIndices[index], tensor);
  return kTfLiteOk;
}

static const int outTensorIndices[] = {
  16, 
};
TfLiteStatus trained_model_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(outTensorIndices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus trained_model_invoke() {
  for (size_t i = 0; i < 8; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus trained_model_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
